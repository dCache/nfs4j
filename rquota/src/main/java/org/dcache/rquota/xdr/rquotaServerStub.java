/*
 * Automatically generated by jrpcgen 1.0.7+ on 6/19/24, 7:09 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 *
 * This version of jrpcgen adopted by dCache project
 * See http://www.dCache.ORG for details
 */
package org.dcache.rquota.xdr;

import java.io.IOException;

import org.dcache.oncrpc4j.rpc.*;

/**
 */
public abstract class rquotaServerStub implements RpcDispatchable {

    public void dispatchOncRpcCall(RpcCall call)
            throws OncRpcException, IOException {

        int version = call.getProgramVersion();
        int procedure = call.getProcedure();

        if (version == 1) {
            switch (procedure) {
                case 1: {
                    getquota_args args$ = new getquota_args();
                    call.retrieveCall(args$);
                    getquota_rslt result$ = RQUOTAPROC_GETQUOTA_1(call, args$);
                    call.reply(result$);
                    break;
                }
                case 2: {
                    getquota_args args$ = new getquota_args();
                    call.retrieveCall(args$);
                    getquota_rslt result$ = RQUOTAPROC_GETACTIVEQUOTA_1(call, args$);
                    call.reply(result$);
                    break;
                }
                case 3: {
                    setquota_args args$ = new setquota_args();
                    call.retrieveCall(args$);
                    setquota_rslt result$ = RQUOTAPROC_SETQUOTA_1(call, args$);
                    call.reply(result$);
                    break;
                }
                case 4: {
                    setquota_args args$ = new setquota_args();
                    call.retrieveCall(args$);
                    setquota_rslt result$ = RQUOTAPROC_SETACTIVEQUOTA_1(call, args$);
                    call.reply(result$);
                    break;
                }
                default:
                    call.failProcedureUnavailable();
            }
        } else if (version == 2) {
            switch (procedure) {
                case 1: {
                    ext_getquota_args args$ = new ext_getquota_args();
                    call.retrieveCall(args$);
                    getquota_rslt result$ = RQUOTAPROC_GETQUOTA_2(call, args$);
                    call.reply(result$);
                    break;
                }
                case 2: {
                    ext_getquota_args args$ = new ext_getquota_args();
                    call.retrieveCall(args$);
                    getquota_rslt result$ = RQUOTAPROC_GETACTIVEQUOTA_2(call, args$);
                    call.reply(result$);
                    break;
                }
                case 3: {
                    ext_setquota_args args$ = new ext_setquota_args();
                    call.retrieveCall(args$);
                    setquota_rslt result$ = RQUOTAPROC_SETQUOTA_2(call, args$);
                    call.reply(result$);
                    break;
                }
                case 4: {
                    ext_setquota_args args$ = new ext_setquota_args();
                    call.retrieveCall(args$);
                    setquota_rslt result$ = RQUOTAPROC_SETACTIVEQUOTA_2(call, args$);
                    call.reply(result$);
                    break;
                }
                default:
                    call.failProcedureUnavailable();
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract getquota_rslt RQUOTAPROC_GETQUOTA_1(RpcCall call$, getquota_args arg1);

    public abstract getquota_rslt RQUOTAPROC_GETACTIVEQUOTA_1(RpcCall call$, getquota_args arg1);

    public abstract setquota_rslt RQUOTAPROC_SETQUOTA_1(RpcCall call$, setquota_args arg1);

    public abstract setquota_rslt RQUOTAPROC_SETACTIVEQUOTA_1(RpcCall call$, setquota_args arg1);

    public abstract getquota_rslt RQUOTAPROC_GETQUOTA_2(RpcCall call$, ext_getquota_args arg1);

    public abstract getquota_rslt RQUOTAPROC_GETACTIVEQUOTA_2(RpcCall call$, ext_getquota_args arg1);

    public abstract setquota_rslt RQUOTAPROC_SETQUOTA_2(RpcCall call$, ext_setquota_args arg1);

    public abstract setquota_rslt RQUOTAPROC_SETACTIVEQUOTA_2(RpcCall call$, ext_setquota_args arg1);

}
// End of rquotaServerStub.java
